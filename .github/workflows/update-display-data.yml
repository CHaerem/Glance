name: Update Display Data

on:
  repository_dispatch:
    types: [update-current-image, update-device-status, update-schedule]
  workflow_dispatch:
    inputs:
      action_type:
        description: 'Type of update'
        required: true
        default: 'update-current-image'
        type: choice
        options:
        - update-current-image
        - update-device-status
        - update-schedule

jobs:
  update-data:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Update Current Image Data
        if: github.event.action == 'update-current-image' || github.event.inputs.action_type == 'update-current-image'
        run: |
          # Create the API data from payload
          echo '${{ github.event.client_payload.data || github.event.inputs.data }}' | jq '.' > docs/api/current.json
          
          # Validate JSON
          if ! jq empty docs/api/current.json; then
            echo "Invalid JSON data provided"
            exit 1
          fi
          
          echo "Updated current image data"
          cat docs/api/current.json
      
      - name: Update Device Status
        if: github.event.action == 'update-device-status' || github.event.inputs.action_type == 'update-device-status'
        run: |
          # Update device status file
          DEVICE_ID="${{ github.event.client_payload.device_id || 'esp32-001' }}"
          mkdir -p docs/api/devices
          echo '${{ github.event.client_payload.status || github.event.inputs.data }}' | jq '.' > "docs/api/devices/${DEVICE_ID}.json"
          
          echo "Updated device status for ${DEVICE_ID}"
          cat "docs/api/devices/${DEVICE_ID}.json"
      
      - name: Update Schedule Configuration
        if: github.event.action == 'update-schedule' || github.event.inputs.action_type == 'update-schedule'
        run: |
          # Update schedule configuration
          echo '${{ github.event.client_payload.schedule || github.event.inputs.data }}' | jq '.' > docs/api/schedule.json
          
          echo "Updated schedule configuration"
          cat docs/api/schedule.json
      
      - name: Update Last Modified Timestamp
        run: |
          # Update timestamp file for cache busting
          echo "{\"lastUpdated\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\", \"timestamp\": $(date +%s)}" > docs/api/timestamp.json
      
      - name: Commit and push changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add docs/api/
          
          # Check if there are changes to commit
          if git diff --cached --quiet; then
            echo "No changes to commit"
            exit 0
          fi
          
          # Commit with detailed message
          COMMIT_MSG="🤖 Update display data - $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          if [ "${{ github.event.action }}" = "update-current-image" ]; then
            COMMIT_MSG="🖼️ Update current image - $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          elif [ "${{ github.event.action }}" = "update-device-status" ]; then
            COMMIT_MSG="📊 Update device status - $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          elif [ "${{ github.event.action }}" = "update-schedule" ]; then
            COMMIT_MSG="⏰ Update schedule - $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          fi
          
          git commit -m "$COMMIT_MSG"
          git push
          
          echo "Changes committed and pushed successfully"
      
      - name: Trigger GitHub Pages rebuild
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Trigger Pages rebuild by making an empty commit to gh-pages branch if it exists
          if git ls-remote --heads origin gh-pages | grep -q gh-pages; then
            git checkout gh-pages 2>/dev/null || git checkout -b gh-pages
            git merge main --no-edit
            git push origin gh-pages
          fi
          
          echo "GitHub Pages rebuild triggered"