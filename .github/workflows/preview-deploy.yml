name: Deploy Preview to GitHub Pages

on:
  push:
    branches:
      - main
    paths:
      - 'server/**/*.html'
      - 'server/**/*.js'
      - 'server/**/*.css'
      - 'server/preview/**'
      - '.github/workflows/preview-deploy.yml'
  pull_request:
    types: [opened, synchronize, reopened, closed]
    paths:
      - 'server/**/*.html'
      - 'server/**/*.js'
      - 'server/**/*.css'
      - 'server/preview/**'
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write
  pull-requests: write

# Allow only one concurrent deployment per PR, but allow main to deploy independently
concurrency:
  group: "pages-${{ github.event_name }}-${{ github.event.pull_request.number || github.ref }}"
  cancel-in-progress: false

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    # Skip deployment on PR close
    if: github.event.action != 'closed'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          cd server
          npm ci

      - name: Determine deployment path
        id: deploy-path
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "subdir=pr-${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
            echo "base=/pr-${{ github.event.pull_request.number }}/" >> $GITHUB_OUTPUT
            echo "is_pr=true" >> $GITHUB_OUTPUT
          else
            echo "subdir=." >> $GITHUB_OUTPUT
            echo "base=/" >> $GITHUB_OUTPUT
            echo "is_pr=false" >> $GITHUB_OUTPUT
          fi

      - name: Fetch existing GitHub Pages content
        if: steps.deploy-path.outputs.is_pr == 'true'
        continue-on-error: true
        run: |
          # Try to fetch existing gh-pages branch to preserve other PR previews
          git fetch origin gh-pages:gh-pages 2>/dev/null || echo "No gh-pages branch yet"

          # Create staging directory
          mkdir -p _site

          # If gh-pages exists, copy its content to preserve other PRs
          if git rev-parse --verify gh-pages >/dev/null 2>&1; then
            echo "Fetching existing content from gh-pages branch..."
            git checkout gh-pages -- . 2>/dev/null || true

            # Copy everything except .git
            find . -maxdepth 1 ! -name . ! -name .git ! -name _site ! -name server ! -name .github -exec cp -r {} _site/ \;

            # Go back to our branch
            git checkout ${{ github.ref_name }}
          else
            echo "No existing gh-pages content found (first deployment)"
          fi

      - name: Build preview
        env:
          BASE_PATH: ${{ steps.deploy-path.outputs.base }}
        run: |
          cd server
          npm run build:preview

      - name: Verify build output
        run: |
          echo "Checking build output..."
          ls -la server/preview/
          if [ ! -f "server/preview/index.html" ]; then
            echo "❌ Error: index.html not found in build output"
            exit 1
          fi
          if [ ! -f "server/preview/admin.html" ]; then
            echo "❌ Error: admin.html not found in build output"
            exit 1
          fi
          echo "✅ Build output verified"

      - name: Prepare deployment directory
        run: |
          SUBDIR="${{ steps.deploy-path.outputs.subdir }}"

          if [ "${{ steps.deploy-path.outputs.is_pr }}" == "true" ]; then
            # For PR: merge with existing content
            echo "Preparing PR preview in subdirectory: $SUBDIR"
            mkdir -p "_site/$SUBDIR"
            cp -r server/preview/* "_site/$SUBDIR/"
          else
            # For main: deploy to root
            echo "Preparing main deployment to root"
            mkdir -p _site
            cp -r server/preview/* _site/
          fi

          # Ensure .nojekyll exists
          touch _site/.nojekyll

          echo "Final deployment structure:"
          ls -la _site/
          if [ "${{ steps.deploy-path.outputs.is_pr }}" == "true" ]; then
            echo "PR preview content:"
            ls -la "_site/$SUBDIR/"
          fi

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '_site'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Get deployment URL
        id: get-url
        run: |
          REPO_NAME="${{ github.event.repository.name }}"
          OWNER_LOWER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')

          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "url=https://${OWNER_LOWER}.github.io/${REPO_NAME}/pr-${{ github.event.pull_request.number }}/" >> $GITHUB_OUTPUT
          else
            echo "url=https://${OWNER_LOWER}.github.io/${REPO_NAME}/" >> $GITHUB_OUTPUT
          fi

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const deployUrl = '${{ steps.get-url.outputs.url }}';

            const comment = `## 🚀 Preview Deployed!

            Your changes are live at: **${deployUrl}**

            **Quick Links:**
            - 🎨 [Main Interface](${deployUrl})
            - ⚙️ [Admin Panel](${deployUrl}admin.html)

            **Other Previews:**
            - 📌 [Main Demo](https://chaerem.github.io/Glance/) (stable, from main branch)
            - 🔗 This PR: \`pr-${prNumber}\` subdirectory

            > **Note:** This preview uses a mocked API that runs entirely in the browser. All functionality is simulated - no real backend or OpenAI calls are made.

            ---

            <details>
            <summary>📋 Troubleshooting</summary>

            If the preview URL returns a 404:
            1. Wait 2-3 minutes for deployment to propagate
            2. Verify GitHub Pages is enabled in **Settings** → **Pages**
            3. Ensure source is set to **GitHub Actions**
            4. Check the Actions tab for deployment status

            See [\`.github/GITHUB_PAGES_SETUP.md\`](.github/GITHUB_PAGES_SETUP.md) for more help.
            </details>

            ---

            The preview updates automatically with each commit. Multiple PR previews can run simultaneously!`;

            // Find and update existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber
            });

            const botComment = comments.find(c =>
              c.user.type === 'Bot' && c.body.includes('Preview Deployed')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: comment
              });
            }

  cleanup:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    permissions:
      contents: read
      pages: write
      id-token: write
      pull-requests: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          fetch-depth: 0

      - name: Remove PR preview directory
        run: |
          PR_DIR="pr-${{ github.event.pull_request.number }}"
          if [ -d "$PR_DIR" ]; then
            echo "Removing preview directory: $PR_DIR"
            rm -rf "$PR_DIR"
          else
            echo "Preview directory not found: $PR_DIR"
          fi

          # Ensure .nojekyll exists
          touch .nojekyll

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '.'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Comment PR cleanup
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request.number;

            const comment = `## 🧹 Preview Cleaned Up

            The preview for this PR has been removed from GitHub Pages.

            The main demo is still available at: https://chaerem.github.io/Glance/`;

            // Update existing bot comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber
            });

            const botComment = comments.find(c =>
              c.user.type === 'Bot' && c.body.includes('Preview Deployed')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            }
